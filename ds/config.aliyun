management:
  security:
    roles: ADMIN
    enabled: false
  context-path: /admin

security:
  user:
    name: dida
    password: pinche

server:
  tomcat:
    accesslog:
      directory: /applogs/tomcat/access/${spring.application.name}
      enabled: true
    basedir: /appdata/${spring.application.name}
    accept-count: 1024
    max-connections: 10240
    max-threads: 1
    min-spare-threads: 1

spring:
  application:
    index: ${spring.cloud.client.hostname}
  http:
    encoding:
      force: true     
  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration, org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration, org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration
  aop:
    auto: true
  cloud:
    stream:
      default-binder: kafka
      kafka:
        binder:
          brokers: ECS-HB2-BJ-E-2, ECS-HB2-BJ-E-3, ECS-HB2-BJ-E-4
          zkNodes: ECS-HB2-BJ-E-2, ECS-HB2-BJ-E-3, ECS-HB2-BJ-E-4
          defaultZkPort: 2402
          defaultBrokerPort: 9092

datasource:
  common:
    master:
      initialSize: 5
      minIdle: 5
      maxActive: 100
      maxWait: 500  # 配置获取连接等待超时的时间
      defaultAutoCommit: false
      removeAbandoned: false #移除无引用连接（那些没有close的连接）此处设置为false，需要保证程序中连接一定释放
      minEvictableIdleTimeMillis: 1800000 # 配置一个连接空闲多久从池中移除，单位是毫秒,(-1代表不做判断)
      timeBetweenEvictionRunsMillis: 1800000 # 配置定时器，间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒,值为负数表示不开启
      testOnBorrow: true
      testOnReturn: false
      testWhileIdle: true #当连接空闲时是否测试，即保持连接一直存活，配合定时器使用
      filters: stat,slf4j,wall # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500;connectTimeout=2000;socketTimeout=3000 # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connection-init-sqls: ["SET NAMES utf8mb4"]
      driver-class-name: com.mysql.jdbc.Driver
    slave:
      initialSize: 8
      minIdle: 8
      maxActive: 100
      maxWait: 1000  # 配置获取连接等待超时的时间
      defaultAutoCommit: false
      removeAbandoned: false #移除无引用连接（那些没有close的连接）此处设置为false，需要保证程序中连接一定释放
      minEvictableIdleTimeMillis: 1800000 # 配置一个连接空闲多久从池中移除，单位是毫秒,(-1代表不做判断)
      timeBetweenEvictionRunsMillis: 1800000 # 配置定时器，间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒,值为负数表示不开启
      testOnBorrow: true
      testOnReturn: false
      testWhileIdle: true #当连接空闲时是否测试，即保持连接一直存活，配合定时器使用
      filters: stat,slf4j,wall # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500;connectTimeout=2000;socketTimeout=3000 # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connection-init-sqls: ["SET NAMES utf8mb4"]
      driver-class-name: com.mysql.jdbc.Driver

  didapinche:
    master:
      url: jdbc:mysql://192.168.200.1:4000/didapinche?characterEncoding=utf8
      username: onlinewrite
      password: Dida9in!che
    slave:
      url: jdbc:mysql://192.168.200.238:4000/didapinche?characterEncoding=utf8
      username: onlinewrite
      password: Dida9in!che
  misc:
    master:
      url: jdbc:mysql://192.168.200.1:4000/didapinche_misc?characterEncoding=utf8
      username: onlinewrite
      password: Dida9in!che
    slave:
      url: jdbc:mysql://192.168.200.238:4000/didapinche_misc?characterEncoding=utf8
      username: onlinewrite
      password: Dida9in!che
  taxi:
    master:
      url: jdbc:mysql://192.168.200.1:4000/didapinche_taxi?characterEncoding=utf8
      username: onlinewrite
      password: Dida9in!che
    slave:
      url: jdbc:mysql://192.168.200.238:4000/didapinche_taxi?characterEncoding=utf8
      username: onlinewrite
      password: Dida9in!che
  carpool:
    master:
      url: jdbc:mysql://192.168.200.1:4001/didapinche_carpool?characterEncoding=utf8
      username: onlinewrite
      password: Dida9in!che
    slave:
      url: jdbc:mysql://192.168.200.238:4001/didapinche_carpool?characterEncoding=utf8
      username: onlinewrite
      password: Dida9in!che
  payaccount_his:
    master:
      url: jdbc:mysql://192.168.200.1:4002/didapinche_payaccount_his?characterEncoding=utf8
      username: onlinewrite
      password: Dida9in!che
    slave:
      url: jdbc:mysql://192.168.200.238:4002/didapinche_payaccount_his?characterEncoding=utf8
      username: onlinewrite
      password: Dida9in!che
  coupon:
    master:
      url: jdbc:mysql://192.168.200.1:4003/didapinche_coupon?characterEncoding=utf8
      username: onlinewrite
      password: Dida9in!che
    slave:
      url: jdbc:mysql://192.168.200.238:4003/didapinche_coupon?characterEncoding=utf8
      username: onlinewrite
      password: Dida9in!che
  jifen:
    master:
      url: jdbc:mysql://192.168.200.1:4000/didapinche_jifen?characterEncoding=utf8
      username: onlinewrite
      password: Dida9in!che
    slave:
      url: jdbc:mysql://192.168.200.238:4000/didapinche_jifen?characterEncoding=utf8
      username: onlinewrite
      password: Dida9in!che
  cms:
    master:
      url: jdbc:mysql://192.168.200.1:4000/didapinche_cms?tinyInt1isBit=false&amp;useUnicode=true&amp;characterEncoding=utf-8
      username: onlinewrite
      password: Dida9in!che
    slave:
      url: jdbc:mysql://192.168.200.238:4000/didapinche_cms?tinyInt1isBit=false&amp;useUnicode=true&amp;characterEncoding=utf-8
      username: onlinewrite
      password: Dida9in!che
  enterprise:
    master:
      url: jdbc:mysql://192.168.200.1:4004/didapinche_enterprise?characterEncoding=utf8
      username: onlinewrite
      password: Dida9in!che
    slave:
      url: jdbc:mysql://192.168.200.2:4004/didapinche_enterprise?characterEncoding=utf8
      username: onlinewrite
      password: Dida9in!che
  saas:
    master:
      url: jdbc:mysql://192.168.200.1:4000/didapinche_saas?characterEncoding=utf8
      username: onlinewrite
      password: Dida9in!che
    slave:
      url: jdbc:mysql://192.168.200.238:4000/didapinche_saas?characterEncoding=utf8
      username: onlinewrite
      password: Dida9in!che


memcached:
  servers: 192.168.200.244:11211,192.168.200.234:11211
  operationTimeout: 10000
  shutdownTimeout: 100
  keyprefix: didapinche
  expiredTime: 8000
  opTimeout: 3
  compress: false
  asyncGet: false
  maxSize: 150

redis:
  pool:
    maxTotal: 100
    maxIdle: 20
    maxWaitMillis: 5000
    testOnBorrow: true

  servers:
    r1:
      master: 192.168.200.228
      slave: 192.168.200.228
      port: 6392
      password: dida0901
    r2:
      master: 192.168.200.228
      slave: 192.168.200.228
      port: 6392
      password: dida0901
    r3:
      master: 192.168.200.228
      slave: 192.168.200.228
      port: 6392
      password: dida0901
    r4:
      host: ["192.168.200.228"]
      port: 6392
      password: dida0901
    r5:
      master: 192.168.200.228
      slave: 192.168.200.228
      port: 6392
      password: dida0901
    r6:
      master: 192.168.200.228
      slave: 192.168.200.228
      port: 6392
      password: dida0901
    r7:
      master: 192.168.200.228
      slave: 192.168.200.228
      port: 6392
      password: dida0901

rocketmq:
  producer:
    default_rocketMQNamesrvAddr: 192.168.200.231:9876;192.168.200.235:9876;192.168.200.239:9876;192.168.200.241:9876;
    online_rocketMQNamesrvAddr: 192.168.200.231:9876;192.168.200.235:9876;192.168.200.239:9876;192.168.200.241:9876;

  consumer:
    _nameSrvAddr: 192.168.200.231:9876;192.168.200.235:9876;192.168.200.239:9876;192.168.200.241:9876;
    _maxOffsetThreshold: 15000
    #_txBeanName: transactionManager_didapinche

sms:
  smsSwitch: true
  wsdlAddr: http://192.168.200.229:8280/dida-sms/smsService?wsdl

thrift:
  zk_connection: 192.168.200.233:2282,192.168.200.236:2282,192.168.200.251:2282
  defaultTimeout: 3000

hbase:
  thrift:
    host: 192.168.200.249
    port: 9090
    maxActive: 100
    maxIdle: 10
    testOnBorrow: true
    testOnReturn: false
    testWhileIdle: true
    conTimeout: 2000

base_message:
  source_cid: dida-common

activemq:
  brokerURL:
    point: tcp://192.168.200.232:61616
    transfer: tcp://192.168.200.232:61616

redis-cluster:
  pool:
    minIdle: 4
    maxIdle: 10
    maxTotal: 100
    maxWaitMillis: 3000
    testOnBorrow: true
  servers:
    rc1: #carpool
      nodes: 192.168.200.249:6381,192.168.200.247:6380,192.168.200.228:6379
    rc2: #taxi
      nodes: 192.168.200.249:6381,192.168.200.247:6380,192.168.200.228:6379
    rc3: #task
      nodes: 192.168.200.249:6381,192.168.200.247:6380,192.168.200.228:6379
    rc4: #lock
      nodes: 192.168.200.249:6381,192.168.200.247:6380,192.168.200.228:6379
    rc5: #userstat
      nodes: 192.168.200.249:6381,192.168.200.247:6380,192.168.200.228:6379
    rc6: #active
      nodes: 192.168.200.249:6381,192.168.200.247:6380,192.168.200.228:6379
    rc7: #taxi_mix1
      nodes: 192.168.200.249:6381,192.168.200.247:6380,192.168.200.228:6379
    rc8: #company use taxi
      nodes: 192.168.200.249:6381,192.168.200.247:6380,192.168.200.228:6379
    rc9: #server_finance
      nodes: 192.168.200.249:6381,192.168.200.247:6380,192.168.200.228:6379
    rc10: #server_coupon
      nodes: 192.168.200.249:6381,192.168.200.247:6380,192.168.200.228:6379
    rc11: #server_todo_all_ride
      nodes: 192.168.200.249:6381,192.168.200.247:6380,192.168.200.228:6379
    rc12: #server_cid2id
      nodes: 192.168.200.249:6381,192.168.200.247:6380,192.168.200.228:6379
    rc13: #
      nodes: 192.168.200.249:6381,192.168.200.247:6380,192.168.200.228:6379
    rc14: #
      nodes: 192.168.200.249:6381,192.168.200.247:6380,192.168.200.228:6379
    rc15: #
      nodes: 192.168.200.249:6381,192.168.200.247:6380,192.168.200.228:6379
    rc16: #server_routing_rc16
      nodes: 192.168.200.249:6381,192.168.200.247:6380,192.168.200.228:6379
    rc17: #server_cupid_rc17
      nodes: 192.168.200.249:6381,192.168.200.247:6380,192.168.200.228:6379
    rc18: #
      nodes: 192.168.200.249:6381,192.168.200.247:6380,192.168.200.228:6379
      
async:
  threadpool:
    default:
      corePoolSize: 5
      maximumPoolSize: 80
      queueCapacity: 10
      asyncTimeout: 3  # unit: s
      
com:
  didapinche:
    coupon:
      thrift:
        CouponService:
          group: group1
          failOver: 0
          timeout: 3000
    thrift:
      taxiwrite:
        TaxiwriteThriftService:
          group: group1
          failOver: 0
          timeout: 800
      carpoolwrite:
        CarpoolwriteThriftService:
          group: group1
          failOver: 0
          timeout: 800
      didapinchewrite:
        DidapinchewriteThriftService:
          group: group1
          failOver: 0
          timeout: 800
      taxipaywrite:
        TaxiPayWriteThriftService:
          group: group1
          failOver: 0
          timeout: 800
          
      
promeconsul:
    appName: ${spring.application.name}
    
endpoints:
  prometheus:
    path: /metrics
  metrics:
    enabled: false

image:
  upload: http://192.168.200.229:7783/bfs/
  download:
    old: http://www-ecs.didapinche.com/imgs/
    bfs:
      outer: http://www-ecs.didapinche.com/pics/
      inner: http://192.168.200.229:7783/bfs/
      
opentracing:
  spring:
    cloud:
      jdbc:
        enabled: false            